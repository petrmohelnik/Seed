#version 460

layout (quads, fractional_odd_spacing, ccw) in;

layout(std140, binding = 0) uniform CameraBlock
{
    mat4 view;
    mat4 projection;
    vec3 viewPos;
};

layout(std140, binding = 2) uniform ModelBlock
{
    mat4 model;
    mat3 tiModel;
};

layout(std140, binding = 3) uniform MaterialBlock
{
    bool SpecularWorkflow;
    bool UseOcclusionMap;
    float ParallaxStrength;
} Material;

layout(binding = 2) uniform sampler2D texHeight;

in vec3 tPos[];
in vec3 tViewPos[];
in vec2 tTexCoords[];
in mat3 tTBN[];

out vec3 fPos;
out vec3 fViewPos;
out vec2 fTexCoords;
out mat3 fTBN;

void main()
{
    // get patch coordinate
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    // ----------------------------------------------------------------------
    // retrieve control point texture coordinates
    vec2 t00 = tTexCoords[0];
    vec2 t01 = tTexCoords[1];
    vec2 t10 = tTexCoords[2];
    vec2 t11 = tTexCoords[3];

    // bilinearly interpolate texture coordinate across patch
    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 texCoord = (t1 - t0) * v + t0;
    
    // lookup texel at patch coordinate for height and scale + shift as desired
    float Height = texture(texHeight, texCoord).r;

    // ----------------------------------------------------------------------
    // retrieve control point position coordinates
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    // compute patch surface normal
    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    vec4 normal = normalize( vec4(cross(uVec.xyz, vVec.xyz), 0) );

    // bilinearly interpolate position coordinate across patch
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0;

    // displace point along normal
    p += normal * Height * Material.ParallaxStrength;

    ///---
    fTBN = tTBN[0];
    mat3 TBN_inverted = transpose(fTBN); //transpose equals inverse for orthogonal matrices

    fPos = TBN_inverted * vec3(model * p);
    fViewPos = TBN_inverted * viewPos;
    fTexCoords = texCoord;
    ///---

    // ----------------------------------------------------------------------
    // output patch point position in clip space
    gl_Position = projection * view * model * p;
    //gl_Position = p;
}